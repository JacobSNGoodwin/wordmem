version: "3.8"
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  postgres-auth:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "pgdata_auth:/var/lib/postgresql/data"
      # - ./init:/docker-entrypoint-initdb.d/
    command: ["postgres", "-c", "log_statement=all"]
  postgres-words:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "pgdata_words:/var/lib/postgresql/data"
      # - ./init:/docker-entrypoint-initdb.d/
    command: ["postgres", "-c", "log_statement=all"]
  redis-auth:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - "redisdata:/data"
  account:
    build:
      context: ./auth
      target: builder
    image: account # if we don't give image name, traefik won't create router 🤷‍♂️
    expose:
      - "8080" # seems necessary for Traefik to have internal expose of port
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account.rule=Host(`wordmem.test`) && PathPrefix(`/api/account`)"
    environment:
      - ENV=dev
    volumes:
      - ./auth:/go/src/app
    depends_on:
      - postgres-auth
      - redis-auth
    # have to use $$ (double-dolla) so docker doesn't try to substitute a variable
    command: reflex -r "\.go$$" -s -- sh -c "go run ./"
  account-client:
    build:
      context: ./account-client
    image: account-client # if we don't give image name, traefik won't create router 🤷‍♂️
    expose:
      - "8080"
    ports:
      - "3000:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.account-client.rule=Host(`wordmem.test`) && PathPrefix(`/account`)"
    volumes:
      - /app/node_modules #avoid overwriting node_modules
      - ./account-client:/app
  words:
    build:
      # build from build stage of dockerfile in words directory
      context: ./words
      target: builder
    image: words # if we don't give image name, traefik won't create router 🤷‍♂️
    expose:
      - "8080" # seems necessary for Traefik to have internal expose of port
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.words.rule=Host(`wordmem.test`) && PathPrefix(`/api/words`)"
    volumes:
      - ./words:/app
    depends_on:
      - postgres-words
    environment:
      - NODE_ENV=dev
    command: ["npm", "run", "dev"]
  word-client:
    build:
      context: ./word-client
    image: word-client # if we don't give image name, traefik won't create router 🤷‍♂️
    stdin_open: true # required with react-scripts > 3.4
    expose:
      - "3000"
    ports:
      - "3003:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.word-client.rule=Host(`wordmem.test`)"
    volumes:
      - /app/node_modules #avoid overwriting node_modules
      - ./word-client:/app
volumes:
  pgdata_auth:
  pgdata_words:
  redisdata:
